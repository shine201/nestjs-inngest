version: '3.8'

services:
  # PostgreSQL database (optional)
  postgres:
    image: postgres:15-alpine
    container_name: basic-example-postgres
    environment:
      POSTGRES_DB: basic_example
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: basic-example-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: basic-example-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application (uncomment to run in Docker)
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: basic-example-app
  #   environment:
  #     NODE_ENV: development
  #     PORT: 3000
  #     DATABASE_URL: postgres://postgres:postgres@postgres:5432/basic_example
  #     REDIS_URL: redis://redis:6379
  #     SMTP_HOST: mailhog
  #     SMTP_PORT: 1025
  #     SMTP_USER: ""
  #     SMTP_PASS: ""
  #     SMTP_SECURE: "false"
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     mailhog:
  #       condition: service_healthy
  #   volumes:
  #     - .:/app
  #     - /app/node_modules
  #   working_dir: /app
  #   command: npm run start:dev

volumes:
  postgres_data:
  redis_data: